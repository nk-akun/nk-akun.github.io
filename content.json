{"meta":{"title":"Mathon","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"MySQL与B+树","slug":"MySQL与B+数","date":"2020-03-05T09:19:03.000Z","updated":"2020-03-05T13:36:10.086Z","comments":true,"path":"2020/03/05/MySQL与B+数/","link":"","permalink":"http://yoursite.com/2020/03/05/MySQL%E4%B8%8EB+%E6%95%B0/","excerpt":"","text":"B+树的基本概 附个链接：https://www.cnblogs.com/nullzx/p/8729425.html 这是B+树的基本概念，B树就是这棵树的所有节点都会存储数据，B+树只有叶子节点存储真正的数据，而其他节点只存储索引，这个索引顾名思义：为查询某个数据指示所应走的方向 插入删除等规则可以看上面的blog MySQL的索引 每个数据表都一定有一个叫作主键的索引，假如我们没有显式规定主键，那么数据库会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。 建立数据表时，MySQL会自动按照主键建立一棵B+树，B+树的叶子节点存储了某几行的全部信息，其他节点存储了若干主键用于查找数据时进行索引。 当我们使用其他列为数据表建立索引时，MySQL同样会按照我们给出的一个或多个列建立B+树，但是此时叶子节点的信息不再是某几行的全部信息了，因为这样相当于多存了一份数据表，没有意义。MyISAM存储引擎会在叶子节点存储数据行的地址，这样我们到达叶子节点就能锁定相应数据行的地址，直接去相应地址拿信息就可以了，而InnoDB会在叶子节点存储数据行的主键信息，然后再根据主键去索引对应的数据行，相当于检索两遍索引。 为什么使用B+树 我们建立的索引会是一棵B+树，为了持久化存储肯定会把它存储在硬盘上的，而硬盘与内存之间的数据交互是以页为单位的，一般是4KB或者8KB，而我们的B+树上的每个节点都是一个页。 也就是说当我们在B+树中寻找某个字段时，操作系统会把这个字段所在的那一页都拿过来，然后二分查找那个字段所在的范围，根据空间相邻性，操作系统也会把相邻几个页也从磁盘拿到内存中，这就是一次IO。 我们知道磁盘与内存的IO是非常耗时间的，我们在B+树中每向下走一层都发生一次IO，所以我们应当尽量减少树的高度以减少IO次数。 现在假设我们有n条数据，每个树中的节点可以存m个信息，那么树的高度就是h=$log_m{n}$，所以m越大,h就越小，所以我们在除叶子节点的其他节点只存索引字段，可以使得m尽可能的大，从而减小树的高度，减少IO次数，这也是为什么我们提倡索引字段要尽可能的小，因为索引字段大了会使得m减小。 那假如我们索引字段非常大怎么办，会不会出现一个节点只能存放一个字段的情况呢？ 行溢出数据为了防止出现这样的情况，当 InnoDB 存储极长的 VARCHAR 或者 BLOB 这类大对象时，我们并不会直接将所有的内容都存放在数据页节点中，而是将行数据中的前 768 个字节存储在数据页中，后面会通过偏移量指向溢出页。这是为了保证一个节点至少能存放两个及以上的字段，防止退化成线性表。","categories":[{"name":"技术专栏","slug":"技术专栏","permalink":"http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E4%B8%93%E6%A0%8F/"},{"name":"MySQL","slug":"技术专栏/MySQL","permalink":"http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E4%B8%93%E6%A0%8F/MySQL/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-03-04T03:44:23.205Z","updated":"2020-03-04T03:44:23.205Z","comments":true,"path":"2020/03/04/hello-world/","link":"","permalink":"http://yoursite.com/2020/03/04/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}
{"meta":{"title":"Marthon","subtitle":"","description":"","author":"John Doe","url":"https://nkakun.cn","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-03-12T04:12:53.283Z","updated":"2020-03-12T04:12:53.274Z","comments":true,"path":"404.html","permalink":"https://nkakun.cn/404.html","excerpt":"","text":"12345678&lt;center&gt;&lt;p huge gray&gt;404&lt;&#x2F;p&gt;&lt;b&gt;很抱歉，您访问的页面不存在&lt;&#x2F;b&gt;可能是输入地址有误或该地址已被删除&lt;&#x2F;center&gt;"},{"title":"About me","date":"2020-03-12T04:13:49.600Z","updated":"2020-03-12T04:11:38.313Z","comments":true,"path":"about/index.html","permalink":"https://nkakun.cn/about/index.html","excerpt":"","text":"12永远相信 天空广阔，大有可为 关于我​ nka_kun/ marathon/ Marthon ​ 大学生一枚 ​ Acmer，本科期间几乎把能打的算法类竞赛都打了，收获颇多 ​ 2019推免研究生，2020即将入学北邮 ​ 曾经酷爱游戏，长大热爱生活（老了，打不动游戏了） ​ 生活无定式，喜欢各种尝试，喜欢户外运动 ​ 非常喜欢交有趣的朋友~ biubiu技能 会用C++、Go、Python写bug 主力Linux，弃用Windows 会写点算法题，codeforce艰难上分的蒟蒻nka_kun 关于本站​ 本站创建于新冠肺炎流行期间 ​ 采用hexo+theme-volantis, 大佬写的太美了 ​ 技术、教程、感悟、生活（希望我都可以坚持写下去） ​ 欢迎大佬们经常来踩！ 与我联系 Email: nk_akun@163.com or marathon8866@gmail.com QQ：1019445971"},{"title":"","date":"2020-03-06T13:58:27.204Z","updated":"2020-03-06T13:58:27.195Z","comments":true,"path":"friends/index.html","permalink":"https://nkakun.cn/friends/index.html","excerpt":"","text":"邻居 留言告诉我吧！ 交换友链的朋友请在下方留言，至少要有名称，网址，标签哦~~ 名称：Marthon 网址：nkakun.cn 标签：golang, web, 折腾, 摄影"},{"title":"所有标签","date":"2020-03-12T04:13:37.762Z","updated":"2020-03-05T15:23:59.208Z","comments":true,"path":"tags/index.html","permalink":"https://nkakun.cn/tags/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2020-03-06T13:25:25.860Z","updated":"2020-03-05T14:01:11.583Z","comments":true,"path":"categories/index.html","permalink":"https://nkakun.cn/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"网络通信中几种IO模型的解释与比较","slug":"网络通信中几种IO模型的解释与比较","date":"2020-03-12T04:15:59.255Z","updated":"2020-03-12T06:35:37.239Z","comments":true,"path":"2020/03/12/网络通信中几种IO模型的解释与比较/","link":"","permalink":"https://nkakun.cn/2020/03/12/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E4%B8%AD%E5%87%A0%E7%A7%8DIO%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%A7%A3%E9%87%8A%E4%B8%8E%E6%AF%94%E8%BE%83/","excerpt":"要点 从通信底层看socket I/O模型 阻塞式I/O 非阻塞式I/O I/O复用 信号驱动I/O 异步I/O","text":"要点 从通信底层看socket I/O模型 阻塞式I/O 非阻塞式I/O I/O复用 信号驱动I/O 异步I/O 从网络通信底层看socket 当我们启动一个web服务，监听某个函数，在c++中使用如下函数： 123456int socket(int domain,int type,int protocol) //创建socketint bind(int sockfd,const struct sockaddr* my_addr,socklen_t addrlen) //my_addr地址绑定sockfdint listen(int sockfd,int backlog) //backlog是指最大监听长度int accept(int sockfd,struct sockaddr* addr,socklen_t addrlen) //addr是接受的远端socket地址ssize_t recv(int sockfd,void *buf,size_t len,int flags) //接收sockfd上的数据 这里执行到recv就要阻塞了，因为客户端有可能还没有发来数据，但是这里就有一个问题，如果服务端监听了多个像这样的客户端socket，那如果光等这一个客户端发来数据而把其他的客户端耽误了，那明显是有点不值当的，我们完全可以先去处理别的请求，再回来处理这个请求，这里就牵扯到I/O复用的问题了. 一个数据输入操作通常包括两个阶段： 等待数据准备好 从内核向进程复制数据 对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待数据到达时，它被暂存到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区。 这里为什么不直接复制到应用进程缓冲区呢？ 这涉及到内核态和用户态的概念，从socket接收数据是只能在内核态做的事情，这里的内核缓冲区的目的也是为了能够暂存客户端发来的数据，提高I/O效率。 I/O模型 阻塞式 I/O 非阻塞式 I/O I/O 复用（select 和 poll） 信号驱动式 I/O（SIGIO） 异步 I/O（AIO） 阻塞式I/O此IO可能因为无法立即完成而被挂起，比如上面的recv函数，用户侧socket并没有发来数据，recv就要阻塞，其他可能发生阻塞的函数有accept，send，connect等，这里的进程因为等待数据而被阻塞，无法继续向下运行 非阻塞式I/O此IO会在系统调用后立即返回，无论是否可以发生此事件。比如执行accept，send，recv，对应事件未发生，可能返回error：EAGAIN（再来一次），也就是会轮询执行系统调用，不断执行直到事件发生为止。也有可能返回EWOULDBLOCK(期望阻塞)，EINPROGRESS（在处理中）。这种由于 CPU 要处理更多的系统调用，因此这种模型的 CPU 利用率比较低。 I/O复用此IO最常用的就是IO通知机制，应用程序（进程/线程）通过IO复用函数向内核注册一组事件，内核通过IO复用函数把IO就绪的事件通知给应用程序，IO复用函数如select，poll，epoll，他们本身是阻塞的，只是他们可以监听多个IO事件，当IOready时，内核会唤醒IO复用函数。 如果一个 Web 服务器没有 I/O 复用，那么每一个 Socket 连接都需要创建一个线程去处理。如果同时有几万个连接，那么就需要创建相同数量的线程。相比于多进程和多线程技术，I/O 复用不需要进程线程创建和切换的开销，系统开销更小。 信号驱动I/O我们对一个文件描述符指定宿主进程，被指定的进程将捕获SIGIO信号。当目标文件描述符有IO事件发生时，SIGIO信号的信号处理函数将被触发，我们也就可以在该信号处理函数中对此文件描述符执行非阻塞IO操作了。 异步I/O上面四种都是同步IO，即要求用户代码自行执行IO逻辑（将数据从内核缓冲区读入用户缓冲区，或者反之），而异步IO则由内核完成上述工作，即数据在内核缓冲区和用户缓冲区之间的移动是在“后台”完成的。同步IO是通知应用进程IO就绪事件，异步IO通知IO完成事件。","categories":[{"name":"技术专栏","slug":"技术专栏","permalink":"https://nkakun.cn/categories/%E6%8A%80%E6%9C%AF%E4%B8%93%E6%A0%8F/"},{"name":"Linux","slug":"技术专栏/Linux","permalink":"https://nkakun.cn/categories/%E6%8A%80%E6%9C%AF%E4%B8%93%E6%A0%8F/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://nkakun.cn/tags/Linux/"},{"name":"网络通信","slug":"网络通信","permalink":"https://nkakun.cn/tags/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"}]},{"title":"MySQL与B+树","slug":"MySQL与B+数","date":"2020-03-05T09:19:03.000Z","updated":"2020-03-12T04:12:33.328Z","comments":true,"path":"2020/03/05/MySQL与B+数/","link":"","permalink":"https://nkakun.cn/2020/03/05/MySQL%E4%B8%8EB+%E6%95%B0/","excerpt":"MySQL索引基本知识、什么B+树、为什么使用B+树建立索引","text":"MySQL索引基本知识、什么B+树、为什么使用B+树建立索引 B+树的基本概念 附个链接：转载: 什么是B+树 这是B+树的基本概念，B树就是这棵树的所有节点都会存储数据，B+树只有叶子节点存储真正的数据，而其他节点只存储索引，这个索引顾名思义：为查询某个数据指示所应走的方向 插入删除等规则可以看上面的blog MySQL的索引 每个数据表都一定有一个叫作主键的索引，假如我们没有显式规定主键，那么数据库会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。 建立数据表时，MySQL会自动按照主键建立一棵B+树，B+树的叶子节点存储了某几行的全部信息，其他节点存储了若干主键用于查找数据时进行索引。 当我们使用其他列为数据表建立索引时，MySQL同样会按照我们给出的一个或多个列建立B+树，但是此时叶子节点的信息不再是某几行的全部信息了，因为这样相当于多存了一份数据表，没有意义。MyISAM存储引擎会在叶子节点存储数据行的地址，这样我们到达叶子节点就能锁定相应数据行的地址，直接去相应地址拿信息就可以了，而InnoDB会在叶子节点存储数据行的主键信息，然后再根据主键去索引对应的数据行，相当于检索两遍索引。 为什么使用B+树 我们建立的索引会是一棵B+树，为了持久化存储肯定会把它存储在硬盘上的，而硬盘与内存之间的数据交互是以页为单位的，一般是4KB或者8KB，而我们的B+树上的每个节点都是一个页。 也就是说当我们在B+树中寻找某个字段时，操作系统会把这个字段所在的那一页都拿过来，然后二分查找那个字段所在的范围，根据空间相邻性，操作系统也会把相邻几个页也从磁盘拿到内存中，这就是一次IO。 我们知道磁盘与内存的IO是非常耗时间的，我们在B+树中每向下走一层都发生一次IO，所以我们应当尽量减少树的高度以减少IO次数。 现在假设我们有n条数据，每个树中的节点可以存m个信息，那么树的高度就是h=$log_m{n}$，所以m越大,h就越小，所以我们在除叶子节点的其他节点只存索引字段，可以使得m尽可能的大，从而减小树的高度，减少IO次数，这也是为什么我们提倡索引字段要尽可能的小，因为索引字段大了会使得m减小。 那假如我们索引字段非常大怎么办，会不会出现一个节点只能存放一个字段的情况呢？ 行溢出数据为了防止出现这样的情况，当 InnoDB 存储极长的 VARCHAR 或者 BLOB 这类大对象时，我们并不会直接将所有的内容都存放在数据页节点中，而是将行数据中的前 768 个字节存储在数据页中，后面会通过偏移量指向溢出页。这是为了保证一个节点至少能存放两个及以上的字段，防止退化成线性表。","categories":[{"name":"技术专栏","slug":"技术专栏","permalink":"https://nkakun.cn/categories/%E6%8A%80%E6%9C%AF%E4%B8%93%E6%A0%8F/"},{"name":"MySQL","slug":"技术专栏/MySQL","permalink":"https://nkakun.cn/categories/%E6%8A%80%E6%9C%AF%E4%B8%93%E6%A0%8F/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://nkakun.cn/tags/MySQL/"},{"name":"B+树","slug":"B-树","permalink":"https://nkakun.cn/tags/B-%E6%A0%91/"}]}]}
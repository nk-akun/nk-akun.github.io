<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Systemd文件编写</title>
      <link href="/2020/11/13/Systemd%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99/"/>
      <url>/2020/11/13/Systemd%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99/</url>
      
        <content type="html"><![CDATA[<p>###配置文件路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/systemd/system</span><br></pre></td></tr></table></figure><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;NeighborBBS server daemon</span><br><span class="line"># After&#x3D;mysql.service</span><br><span class="line">Wants&#x3D;network.target mysql.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart&#x3D;&#x2F;root&#x2F;work&#x2F;repos&#x2F;neighbor_bbs&#x2F;run.sh</span><br><span class="line">Restart&#x3D;always</span><br><span class="line">RestartSec&#x3D;5s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><h3 id="编写常用规则"><a href="#编写常用规则" class="headerlink" title="编写常用规则"></a>编写常用规则</h3><hr><p>####[Unit]</p><p><code>Description</code>字段给出当前服务的简单描述</p><p><code>Documentation</code>字段给出文档位置。</p><p><code>After</code>字段表示此服务应该在哪些服务后启动(必须)</p><p><code>Wants</code>字段表示此服务应该在哪些服务后启动(非必须)</p><h4 id="Service"><a href="#Service" class="headerlink" title="[Service]"></a>[Service]</h4><p><code>ExecStart</code>表示启动命令，如果跟的是<code>.sh</code>文件，<code>.sh</code>文件的开头应为 /bin/bash</p><p><code>ExecStop</code>字段：停止服务时执行的命令</p><p><code>ExecStartPre</code>字段：启动服务之前执行的命令</p><p><code>ExecStartPost</code>字段：启动服务之后执行的命令</p><p><code>ExecStopPost</code>字段：停止服务之后执行的命令</p><p><code>Type</code>表示启动类型</p><ul><li>simple（默认值）：<code>ExecStart</code>字段启动的进程为主进程</li><li>oneshot：类似于<code>simple</code>，但只执行一次，Systemd 会等它执行完，才启动其他服务</li></ul><p><code>Restart</code>字段表示sshd 退出后，Systemd 的重启方式</p><ul><li>no（默认值）：退出后不会重启</li><li>on-failure：非正常退出时（退出状态码非0），包括被信号终止和超时，才会重启</li><li>on-success：只有正常退出时（退出状态码为0），才会重启</li><li>always：不管是什么退出原因，总是重启</li></ul><p><code>RestartSec</code>字段表示 Systemd 重启服务之前，需要等待的秒数</p><h4 id="Install"><a href="#Install" class="headerlink" title="[Install]"></a>[Install]</h4><p><code>WantedBy</code>字段：表示该服务所在的 Target,一般常用multi-user.target</p><blockquote><p><code>Target</code>的含义是服务组，表示一组服务。<code>WantedBy=multi-user.target</code>指的是，sshd 所在的 Target 是<code>multi-user.target</code>。</p><p>这个设置非常重要，因为执行<code>systemctl enable sshd.service</code>命令时，<code>sshd.service</code>的一个符号链接，就会放在<code>/etc/systemd/system</code>目录下面的<code>multi-user.target.wants</code>子目录之中。在multi-user.target这个组里的所有服务，都将开机启动。这就是为什么<code>systemctl enable</code>命令能设置开机启动的原因。</p></blockquote><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="开机自动启动"><a href="#开机自动启动" class="headerlink" title="开机自动启动"></a>开机自动启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable service_name</span><br></pre></td></tr></table></figure><h4 id="重新加载配置文件"><a href="#重新加载配置文件" class="headerlink" title="重新加载配置文件"></a>重新加载配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start service_name</span><br></pre></td></tr></table></figure><h4 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop service_name</span><br></pre></td></tr></table></figure><h4 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart service_name</span><br></pre></td></tr></table></figure><h4 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status service_name</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术专栏 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> service </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信中几种IO模型的解释与比较</title>
      <link href="/2020/03/12/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E4%B8%AD%E5%87%A0%E7%A7%8DIO%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%A7%A3%E9%87%8A%E4%B8%8E%E6%AF%94%E8%BE%83/"/>
      <url>/2020/03/12/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E4%B8%AD%E5%87%A0%E7%A7%8DIO%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%A7%A3%E9%87%8A%E4%B8%8E%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<h4 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h4><ul><li>从通信底层看socket</li><li>I/O模型<ul><li>阻塞式I/O</li><li>非阻塞式I/O</li><li>I/O复用</li><li>信号驱动I/O</li><li>异步I/O</li></ul></li></ul><a id="more"></a><h3 id="从网络通信底层看socket"><a href="#从网络通信底层看socket" class="headerlink" title="从网络通信底层看socket"></a>从网络通信底层看socket</h3><hr><p>当我们启动一个web服务，监听某个函数，在c++中使用如下函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain,<span class="keyword">int</span> type,<span class="keyword">int</span> protocol)</span> <span class="comment">//创建socket</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd,<span class="keyword">const</span> struct sockaddr* my_addr,<span class="keyword">socklen_t</span> addrlen)</span> <span class="comment">//my_addr地址绑定sockfd</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd,<span class="keyword">int</span> backlog)</span> <span class="comment">//backlog是指最大监听长度</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd,struct sockaddr* addr,<span class="keyword">socklen_t</span> addrlen)</span> <span class="comment">//addr是接受的远端socket地址</span></span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">recv</span><span class="params">(<span class="keyword">int</span> sockfd,<span class="keyword">void</span> *buf,<span class="keyword">size_t</span> len,<span class="keyword">int</span> flags)</span> <span class="comment">//接收sockfd上的数据</span></span></span><br></pre></td></tr></table></figure><p>这里执行到recv就要阻塞了，因为客户端有可能还没有发来数据，但是这里就有一个问题，如果服务端监听了多个像这样的客户端socket，那如果光等这一个客户端发来数据而把其他的客户端耽误了，那明显是有点不值当的，我们完全可以先去处理别的请求，再回来处理这个请求，这里就牵扯到I/O复用的问题了.</p><p>一个数据输入操作通常包括两个阶段：</p><ul><li>等待数据准备好</li><li>从内核向进程复制数据</li></ul><p>对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待数据到达时，它被暂存到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区。</p><blockquote><p>这里为什么不直接复制到应用进程缓冲区呢？</p><p>这涉及到内核态和用户态的概念，从socket接收数据是只能在内核态做的事情，这里的内核缓冲区的目的也是为了能够暂存客户端发来的数据，提高I/O效率。</p></blockquote><h3 id="I-O模型"><a href="#I-O模型" class="headerlink" title="I/O模型"></a>I/O模型</h3><hr><ul><li>阻塞式 I/O</li></ul><ul><li>非阻塞式 I/O</li><li>I/O 复用（select 和 poll）</li><li>信号驱动式 I/O（SIGIO）</li><li>异步 I/O（AIO）</li></ul><h4 id="阻塞式I-O"><a href="#阻塞式I-O" class="headerlink" title="阻塞式I/O"></a>阻塞式I/O</h4><p>此IO可能因为无法立即完成而被挂起，比如上面的recv函数，用户侧socket并没有发来数据，recv就要阻塞，其他可能发生阻塞的函数有accept，send，connect等，这里的进程因为等待数据而被阻塞，无法继续向下运行</p><h4 id="非阻塞式I-O"><a href="#非阻塞式I-O" class="headerlink" title="非阻塞式I/O"></a>非阻塞式I/O</h4><p>此IO会在系统调用后立即返回，无论是否可以发生此事件。比如执行accept，send，recv，对应事件未发生，可能返回error：EAGAIN（再来一次），也就是会轮询执行系统调用，不断执行直到事件发生为止。也有可能返回EWOULDBLOCK(期望阻塞)，EINPROGRESS（在处理中）。这种由于 CPU 要处理更多的系统调用，因此这种模型的 CPU 利用率比较低。</p><h4 id="I-O复用"><a href="#I-O复用" class="headerlink" title="I/O复用"></a>I/O复用</h4><p>此IO最常用的就是IO通知机制，应用程序（进程/线程）通过IO复用函数向内核注册一组事件，内核通过IO复用函数把IO就绪的事件通知给应用程序，IO复用函数如select，poll，epoll，他们本身是阻塞的，只是他们可以监听多个IO事件，当IOready时，内核会唤醒IO复用函数。</p><p>如果一个 Web 服务器没有 I/O 复用，那么每一个 Socket 连接都需要创建一个线程去处理。如果同时有几万个连接，那么就需要创建相同数量的线程。相比于多进程和多线程技术，I/O 复用不需要进程线程创建和切换的开销，系统开销更小。</p><h4 id="信号驱动I-O"><a href="#信号驱动I-O" class="headerlink" title="信号驱动I/O"></a>信号驱动I/O</h4><p>我们对一个文件描述符指定宿主进程，被指定的进程将捕获SIGIO信号。当目标文件描述符有IO事件发生时，SIGIO信号的信号处理函数将被触发，我们也就可以在该信号处理函数中对此文件描述符执行非阻塞IO操作了。</p><h4 id="异步I-O"><a href="#异步I-O" class="headerlink" title="异步I/O"></a>异步I/O</h4><p>上面四种都是同步IO，即要求用户代码自行执行IO逻辑（将数据从内核缓冲区读入用户缓冲区，或者反之），而异步IO则由内核完成上述工作，即数据在内核缓冲区和用户缓冲区之间的移动是在“后台”完成的。同步IO是通知应用进程IO就绪事件，异步IO通知IO完成事件。</p>]]></content>
      
      
      <categories>
          
          <category> 技术专栏 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网络通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL与B+树</title>
      <link href="/2020/03/05/MySQL%E4%B8%8EB+%E6%A0%91/"/>
      <url>/2020/03/05/MySQL%E4%B8%8EB+%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>MySQL索引基本知识、什么B+树、为什么使用B+树建立索引</p><a id="more"></a><h4 id="B-树的基本概念"><a href="#B-树的基本概念" class="headerlink" title="B+树的基本概念"></a>B+树的基本概念</h4><hr><p>附个链接：<a href="https://www.cnblogs.com/nullzx/p/8729425.html" target="_blank" rel="noopener">转载: 什么是B+树</a></p><p>这是B+树的基本概念，B树就是这棵树的所有节点都会存储数据，B+树只有叶子节点存储真正的数据，而其他节点只存储索引，这个索引顾名思义：为查询某个数据指示所应走的方向</p><p>插入删除等规则可以看上面的blog</p><h4 id="MySQL的索引"><a href="#MySQL的索引" class="headerlink" title="MySQL的索引"></a>MySQL的索引</h4><hr><p>每个数据表都一定有一个叫作主键的索引，假如我们没有显式规定主键，那么数据库会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。</p><p>建立数据表时，MySQL会自动按照主键建立一棵B+树，B+树的叶子节点存储了某几行的全部信息，其他节点存储了若干主键用于查找数据时进行索引。</p><p>当我们使用其他列为数据表建立索引时，MySQL同样会按照我们给出的一个或多个列建立B+树，但是此时叶子节点的信息不再是某几行的全部信息了，因为这样相当于多存了一份数据表，没有意义。MyISAM存储引擎会在叶子节点存储数据行的地址，这样我们到达叶子节点就能锁定相应数据行的地址，直接去相应地址拿信息就可以了，而InnoDB会在叶子节点存储数据行的主键信息，然后再根据主键去索引对应的数据行，相当于检索两遍索引。</p><h4 id="为什么使用B-树"><a href="#为什么使用B-树" class="headerlink" title="为什么使用B+树"></a>为什么使用B+树</h4><hr><p>我们建立的索引会是一棵B+树，为了持久化存储肯定会把它存储在硬盘上的，而硬盘与内存之间的数据交互是以页为单位的，一般是4KB或者8KB，而我们的B+树上的每个节点都是一个页。</p><p>也就是说当我们在B+树中寻找某个字段时，操作系统会把这个字段所在的那一页都拿过来，然后二分查找那个字段所在的范围，根据空间相邻性，操作系统也会把相邻几个页也从磁盘拿到内存中，这就是一次IO。</p><p>我们知道磁盘与内存的IO是非常耗时间的，我们在B+树中每向下走一层都发生一次IO，所以我们应当尽量减少树的高度以减少IO次数。</p><p>现在假设我们有n条数据，每个树中的节点可以存m个信息，那么树的高度就是h=$log_m{n}$，所以m越大,h就越小，所以我们在除叶子节点的其他节点只存索引字段，可以使得m尽可能的大，从而减小树的高度，减少IO次数，这也是为什么我们提倡索引字段要尽可能的小，因为索引字段大了会使得m减小。</p><p>那假如我们索引字段非常大怎么办，会不会出现一个节点只能存放一个字段的情况呢？</p><h5 id="行溢出数据"><a href="#行溢出数据" class="headerlink" title="行溢出数据"></a>行溢出数据</h5><p>为了防止出现这样的情况，当 InnoDB 存储极长的 VARCHAR 或者 BLOB 这类大对象时，我们并不会直接将所有的内容都存放在数据页节点中，而是将行数据中的前 768 个字节存储在数据页中，后面会通过偏移量指向溢出页。这是为了保证一个节点至少能存放两个及以上的字段，防止退化成线性表。</p>]]></content>
      
      
      <categories>
          
          <category> 技术专栏 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> B+树 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
